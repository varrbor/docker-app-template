#!/usr/bin/env bash


# Is the environment running
PSRESULT="$(docker-compose ps -q)"
if [ ! -z "$PSRESULT" ]; then
    EXEC="yes"
else
    EXEC="no"
fi

# Create base docker-compose command to run
COMPOSE="docker-compose -f docker-compose.yml"

# If we pass any arguments...
if [ $# -gt 0 ]; then

    if [ "$1" == "init" ]; then
        echo "VESSEL: Initializing Vessel..."
        echo "VESSEL: Making vessel command available"
        chmod +x vessel

        echo ""
        echo "VESSEL: Complete!"
        echo "VESSEL: You can now use Vessel"
        echo "VESSEL: Try starting it:"
        echo "./vessel start"


    # Start up containers
    elif [ "$1" == "start" ]; then
        $COMPOSE up -d

    # Stop the containers
    elif [ "$1" == "stop" ]; then
        $COMPOSE down

    # If "art" is used, pass-thru to "artisan"
    # inside a new container
    elif [ "$1" == "artisan" ] || [ "$1" == "art" ]; then
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec \
                php-fpm \
                php artisan "$@"
        else
            $COMPOSE run --rm \
                php-fpm \
                php artisan "$@"
        fi

    # If "composer" is used, pass-thru to "composer"
    # inside a new container
    elif [ "$1" == "composer" ] || [ "$1" == "comp" ]; then
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec \
                php-fpm \
                composer "$@"
        else
            $COMPOSE run --rm \
                php-fpm \
                composer "$@"
        fi

    # If "test" is used, run unit tests,
    # pass-thru any extra arguments to php-unit
    elif [ "$1" == "test" ]; then
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec \
                php-fpm \
                ./vendor/bin/phpunit "$@"
        else
            $COMPOSE run --rm \
                php-fpm \
                ./vendor/bin/phpunit "$@"
        fi

    # If "tinker" is used, drop into the REPL
    # inside a new container
    elif [ "$1" == "tinker" ] ; then
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec \
                php-fpm \
                php artisan tinker
        else
            $COMPOSE run --rm \
                php-fpm \
                php artisan tinker
        fi

    # If "npm" is used, run npm
    # from our node container
    elif [ "$1" == "npm" ]; then
        shift 1
        $COMPOSE run --rm \
            node \
            npm "$@"

    # If "yarn" is used, run yarn
    # from our node container
    elif [ "$1" == "yarn" ]; then
        shift 1
        $COMPOSE run --rm \
            node \
            yarn "$@"

    # If "gulp" is used, run gulp
    # from our node container
    elif [ "$1" == "gulp" ]; then
        shift 1
        $COMPOSE run --rm \
            node \
            ./node_modules/.bin/gulp "$@"

    # If "dump" is used, run mysqldump
    # from our mysql container
    elif [ "$1" == "dump" ]; then
        shift 1
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec \
                mysql \
                mysqldump -u root -peXam287# --default-character-set=utf8mb4 appdb | grep -v "mysqldump: \[Warning\]"
        else
            $COMPOSE run --rm \
                mysql \
                mysqldump -h mysql -u root -peXam287# --default-character-set=utf8mb4 appdb | grep -v "mysqldump: \[Warning\]"
        fi

    # Else, pass-thru args to docker-compose
    else
        $COMPOSE "$@"
    fi
else
    # Use the docker-compose ps command if nothing else passed through
    $COMPOSE ps
fi
